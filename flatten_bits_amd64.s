//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT Â·_flatten_bits(SB), $0-32

    MOVQ base_ptr+0(FP), DI
    MOVQ pbase+8(FP), SI
    MOVQ idx+16(FP), DX
    MOVQ bits+24(FP), CX

    LONG $0xb80f4cf3; BYTE $0xc1 // popcnt    r8, rcx
    WORD $0x068b                 // mov    eax, dword [rsi]
    WORD $0x0141; BYTE $0xc0     // add    r8d, eax
    WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE LBB0_3
    WORD $0xc283; BYTE $0xc0     // add    edx, -64
LBB0_2:
    LONG $0xbc0f4cf3; BYTE $0xc9 // tzcnt    r9, rcx
    WORD $0x0141; BYTE $0xd1     // add    r9d, edx
    WORD $0xc089                 // mov    eax, eax
    LONG $0x870c8944             // mov    dword [rdi + 4*rax], r9d
    LONG $0xf3b0e2c4; BYTE $0xc9 // blsr    r9, rcx
    LONG $0xbc0f49f3; BYTE $0xc9 // tzcnt    rcx, r9
    WORD $0xd101                 // add    ecx, edx
    WORD $0x068b                 // mov    eax, dword [rsi]
    WORD $0xc0ff                 // inc    eax
    WORD $0x0c89; BYTE $0x87     // mov    dword [rdi + 4*rax], ecx
    LONG $0xf3b0c2c4; BYTE $0xc9 // blsr    r9, r9
    LONG $0xbc0f49f3; BYTE $0xc9 // tzcnt    rcx, r9
    WORD $0xd101                 // add    ecx, edx
    WORD $0x068b                 // mov    eax, dword [rsi]
    WORD $0xc083; BYTE $0x02     // add    eax, 2
    WORD $0x0c89; BYTE $0x87     // mov    dword [rdi + 4*rax], ecx
    LONG $0xf3b0c2c4; BYTE $0xc9 // blsr    r9, r9
    LONG $0xbc0f49f3; BYTE $0xc9 // tzcnt    rcx, r9
    WORD $0xd101                 // add    ecx, edx
    WORD $0x068b                 // mov    eax, dword [rsi]
    WORD $0xc083; BYTE $0x03     // add    eax, 3
    WORD $0x0c89; BYTE $0x87     // mov    dword [rdi + 4*rax], ecx
    LONG $0xf3b0c2c4; BYTE $0xc9 // blsr    r9, r9
    LONG $0xbc0f49f3; BYTE $0xc9 // tzcnt    rcx, r9
    WORD $0xd101                 // add    ecx, edx
    WORD $0x068b                 // mov    eax, dword [rsi]
    WORD $0xc083; BYTE $0x04     // add    eax, 4
    WORD $0x0c89; BYTE $0x87     // mov    dword [rdi + 4*rax], ecx
    LONG $0xf3b0c2c4; BYTE $0xc9 // blsr    r9, r9
    LONG $0xbc0f49f3; BYTE $0xc9 // tzcnt    rcx, r9
    WORD $0xd101                 // add    ecx, edx
    WORD $0x068b                 // mov    eax, dword [rsi]
    WORD $0xc083; BYTE $0x05     // add    eax, 5
    WORD $0x0c89; BYTE $0x87     // mov    dword [rdi + 4*rax], ecx
    LONG $0xf3b0c2c4; BYTE $0xc9 // blsr    r9, r9
    LONG $0xbc0f49f3; BYTE $0xc9 // tzcnt    rcx, r9
    WORD $0xd101                 // add    ecx, edx
    WORD $0x068b                 // mov    eax, dword [rsi]
    WORD $0xc083; BYTE $0x06     // add    eax, 6
    WORD $0x0c89; BYTE $0x87     // mov    dword [rdi + 4*rax], ecx
    LONG $0xf3b0c2c4; BYTE $0xc9 // blsr    r9, r9
    LONG $0xbc0f49f3; BYTE $0xc1 // tzcnt    rax, r9
    WORD $0xd001                 // add    eax, edx
    WORD $0x0e8b                 // mov    ecx, dword [rsi]
    WORD $0xc183; BYTE $0x07     // add    ecx, 7
    WORD $0x0489; BYTE $0x8f     // mov    dword [rdi + 4*rcx], eax
    LONG $0xff498d49             // lea    rcx, [r9 - 1]
    WORD $0x068b                 // mov    eax, dword [rsi]
    WORD $0xc083; BYTE $0x08     // add    eax, 8
    WORD $0x0689                 // mov    dword [rsi], eax
    WORD $0x214c; BYTE $0xc9     // and    rcx, r9
	JNE LBB0_2
LBB0_3:
    WORD $0x8944; BYTE $0x06     // mov    dword [rsi], r8d
    RET
