//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

DATA LCDATA1<>+0x000(SB)/8, $0x5c5c5c5c5c5c5c5c
DATA LCDATA1<>+0x008(SB)/8, $0x5c5c5c5c5c5c5c5c
DATA LCDATA1<>+0x010(SB)/8, $0x5c5c5c5c5c5c5c5c
DATA LCDATA1<>+0x018(SB)/8, $0x5c5c5c5c5c5c5c5c
DATA LCDATA1<>+0x020(SB)/8, $0x2222222222222222
DATA LCDATA1<>+0x028(SB)/8, $0x2222222222222222
DATA LCDATA1<>+0x030(SB)/8, $0x2222222222222222
DATA LCDATA1<>+0x038(SB)/8, $0x2222222222222222
DATA LCDATA1<>+0x070(SB)/8, $0x0706050403020100
DATA LCDATA1<>+0x078(SB)/8, $0xffffffffffff0908
DATA LCDATA1<>+0x080(SB)/8, $0xff0f0e0d0c0b0aff
DATA LCDATA1<>+0x088(SB)/8, $0xffffffffffffffff
DATA LCDATA1<>+0x090(SB)/8, $0xffffffffffffffff
DATA LCDATA1<>+0x098(SB)/8, $0xffffffffffffffff
DATA LCDATA1<>+0x0a0(SB)/8, $0xff0f0e0d0c0b0aff
DATA LCDATA1<>+0x0a8(SB)/8, $0xffffffffffffffff
DATA LCDATA1<>+0x0b0(SB)/8, $0xffffffffffffffff
DATA LCDATA1<>+0x0b8(SB)/8, $0xffffffffffffffff
DATA LCDATA1<>+0x0c0(SB)/8, $0xffffffffffffffff
DATA LCDATA1<>+0x0c8(SB)/8, $0xffffffffffffffff
DATA LCDATA1<>+0x0d0(SB)/8, $0xffffffffffffffff
DATA LCDATA1<>+0x0d8(SB)/8, $0xffffffffffffffff
DATA LCDATA1<>+0x0e0(SB)/8, $0xffffffffffffffff
DATA LCDATA1<>+0x0e8(SB)/8, $0xffffffffffffffff
DATA LCDATA1<>+0x0f0(SB)/8, $0xffffffffffffffff
DATA LCDATA1<>+0x0f8(SB)/8, $0xffffffffffffffff
DATA LCDATA1<>+0x100(SB)/8, $0xffffffffffffffff
DATA LCDATA1<>+0x108(SB)/8, $0xffffffffffffffff
DATA LCDATA1<>+0x110(SB)/8, $0xffffffffffffffff
DATA LCDATA1<>+0x118(SB)/8, $0xffffffffffffffff
DATA LCDATA1<>+0x120(SB)/8, $0xffffffffffffffff
DATA LCDATA1<>+0x128(SB)/8, $0xffffffffffffffff
DATA LCDATA1<>+0x130(SB)/8, $0xffffffffffffffff
DATA LCDATA1<>+0x138(SB)/8, $0xffffffffffffffff
DATA LCDATA1<>+0x140(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x148(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x150(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x158(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x160(SB)/8, $0x0000000000220000
DATA LCDATA1<>+0x168(SB)/8, $0x2f00000000000000
DATA LCDATA1<>+0x170(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x178(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x180(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x188(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x190(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x198(SB)/8, $0x0000005c00000000
DATA LCDATA1<>+0x1a0(SB)/8, $0x000c000000080000
DATA LCDATA1<>+0x1a8(SB)/8, $0x000a000000000000
DATA LCDATA1<>+0x1b0(SB)/8, $0x00000009000d0000
DATA LCDATA1<>+0x1b8(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x1c0(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x1c8(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x1d0(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x1d8(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x1e0(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x1e8(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x1f0(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x1f8(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x200(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x208(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x210(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x218(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x220(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x228(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x230(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x238(SB)/8, $0x0000000000000000
GLOBL LCDATA1<>(SB), 8, $576

TEXT Â·_parse_string(SB), $0-32

    MOVQ src+0(FP), DI
    MOVQ dst+8(FP), SI
    MOVQ pcurrent_string_buf_loc+16(FP), DX
    LEAQ LCDATA1<>(SB), BP

    LONG $0x076ffec5             // vmovdqu    ymm0, yword [rdi]
    LONG $0x067ffec5             // vmovdqu    yword [rsi], ymm0
    LONG $0x4d74fdc5; BYTE $0x00 // vpcmpeqb    ymm1, ymm0, yword 0[rbp] /* [rip + LCPI0_0] */
    LONG $0xc9d7fdc5             // vpmovmskb    ecx, ymm1
    LONG $0x4574fdc5; BYTE $0x20 // vpcmpeqb    ymm0, ymm0, yword 32[rbp] /* [rip + LCPI0_1] */
    LONG $0xf8d77dc5             // vpmovmskb    r15d, ymm0
    WORD $0x418d; BYTE $0xff     // lea    eax, [rcx - 1]
    WORD $0x8544; BYTE $0xf8     // test    eax, r15d
	JE LBB0_4
    WORD $0x8949; BYTE $0xf5     // mov    r13, rsi
LBB0_2:
    WORD $0x8944; BYTE $0xf8     // mov    eax, r15d
    LONG $0xbc0f48f3; BYTE $0xc8 // tzcnt    rcx, rax
    LONG $0x0d44c641; WORD $0x0000 // mov    byte [r13 + rcx], 0
    WORD $0x894c; BYTE $0xe8     // mov    rax, r13
    WORD $0x2948; BYTE $0xf0     // sub    rax, rsi
    WORD $0x0148; BYTE $0xc8     // add    rax, rcx
    WORD $0x8b48; BYTE $0x32     // mov    rsi, qword [rdx]
    WORD $0x0688                 // mov    byte [rsi], al
    WORD $0x8b48; BYTE $0x32     // mov    rsi, qword [rdx]
    WORD $0x6688; BYTE $0x01     // mov    byte [rsi + 1], ah
    WORD $0xc689                 // mov    esi, eax
    WORD $0xeec1; BYTE $0x10     // shr    esi, 16
    WORD $0x8b48; BYTE $0x3a     // mov    rdi, qword [rdx]
    LONG $0x02778840             // mov    byte [rdi + 2], sil
    WORD $0xe8c1; BYTE $0x18     // shr    eax, 24
    WORD $0x8b48; BYTE $0x32     // mov    rsi, qword [rdx]
    WORD $0x4688; BYTE $0x03     // mov    byte [rsi + 3], al
    LONG $0x0d448d49; BYTE $0x01 // lea    rax, [r13 + rcx + 1]
    WORD $0x8948; BYTE $0x02     // mov    qword [rdx], rax
    LONG $0x000001b8; BYTE $0x00 // mov    eax, 1
LBB0_3:
    VZEROUPPER
    MOVQ AX, res+24(FP)
    RET
LBB0_4:
    LONG $0x456ffdc5; BYTE $0x00 // vmovdqa    ymm0, yword 0[rbp] /* [rip + LCPI0_0] */
    LONG $0x4d6ffdc5; BYTE $0x20 // vmovdqa    ymm1, yword 32[rbp] /* [rip + LCPI0_1] */
    WORD $0xc031                 // xor    eax, eax
    LONG $0x404d8d4c             // lea    r9, 64[rbp] /* [rip + __ZL10digittoval] */
    LONG $0x0001ba41; WORD $0x0000 // mov    r10d, 1
    LONG $0x40a58d4c; WORD $0x0001; BYTE $0x00 // lea    r12, 320[rbp] /* [rip + __ZL10escape_map] */
    WORD $0x8949; BYTE $0xf5     // mov    r13, rsi
	JMP LBB0_5
LBB0_23:
    LONG $0xfffb8141; WORD $0x0007; BYTE $0x00 // cmp    r11d, 2047
	JA LBB0_25
    WORD $0x8944; BYTE $0xd9     // mov    ecx, r11d
    WORD $0xe9c1; BYTE $0x06     // shr    ecx, 6
    LONG $0x00c0c181; WORD $0x0000 // add    ecx, 192
    LONG $0x004d8841             // mov    byte [r13], cl
    LONG $0x3fe38041             // and    r11b, 63
    LONG $0x80cb8041             // or    r11b, -128
    LONG $0x015d8845             // mov    byte [r13 + 1], r11b
    LONG $0x000002b9; BYTE $0x00 // mov    ecx, 2
	JMP LBB0_29
LBB0_25:
    LONG $0xfffb8141; WORD $0x00ff; BYTE $0x00 // cmp    r11d, 65535
	JA LBB0_27
    WORD $0x8944; BYTE $0xd9     // mov    ecx, r11d
    WORD $0xe9c1; BYTE $0x0c     // shr    ecx, 12
    LONG $0x00e0c181; WORD $0x0000 // add    ecx, 224
    LONG $0x004d8841             // mov    byte [r13], cl
    WORD $0x8944; BYTE $0xd9     // mov    ecx, r11d
    WORD $0xe9c1; BYTE $0x06     // shr    ecx, 6
    WORD $0xe180; BYTE $0x3f     // and    cl, 63
    WORD $0xc980; BYTE $0x80     // or    cl, -128
    LONG $0x014d8841             // mov    byte [r13 + 1], cl
    LONG $0x3fe38041             // and    r11b, 63
    LONG $0x80cb8041             // or    r11b, -128
    LONG $0x025d8845             // mov    byte [r13 + 2], r11b
    LONG $0x000003b9; BYTE $0x00 // mov    ecx, 3
	JMP LBB0_29
LBB0_27:
    LONG $0xfffb8141; WORD $0x10ff; BYTE $0x00 // cmp    r11d, 1114111
	JA LBB0_3
    WORD $0x8944; BYTE $0xd9     // mov    ecx, r11d
    WORD $0xe9c1; BYTE $0x12     // shr    ecx, 18
    LONG $0x00f0c181; WORD $0x0000 // add    ecx, 240
    LONG $0x004d8841             // mov    byte [r13], cl
    WORD $0x8944; BYTE $0xd9     // mov    ecx, r11d
    WORD $0xe9c1; BYTE $0x0c     // shr    ecx, 12
    WORD $0xe180; BYTE $0x3f     // and    cl, 63
    WORD $0xc980; BYTE $0x80     // or    cl, -128
    LONG $0x014d8841             // mov    byte [r13 + 1], cl
    WORD $0x8944; BYTE $0xd9     // mov    ecx, r11d
    WORD $0xe9c1; BYTE $0x06     // shr    ecx, 6
    WORD $0xe180; BYTE $0x3f     // and    cl, 63
    WORD $0xc980; BYTE $0x80     // or    cl, -128
    LONG $0x024d8841             // mov    byte [r13 + 2], cl
    LONG $0x3fe38041             // and    r11b, 63
    LONG $0x80cb8041             // or    r11b, -128
    LONG $0x035d8845             // mov    byte [r13 + 3], r11b
    LONG $0x000004b9; BYTE $0x00 // mov    ecx, 4
	JMP LBB0_29
LBB0_5:
    LONG $0xff5f8d41             // lea    ebx, [r15 - 1]
    WORD $0xcb85                 // test    ebx, ecx
	JE LBB0_9
    WORD $0xc989                 // mov    ecx, ecx
    LONG $0xbc0f4cf3; BYTE $0xc1 // tzcnt    r8, rcx
    LONG $0x4cb60f42; WORD $0x0107 // movzx    ecx, byte [rdi + r8 + 1]
    LONG $0x75f98348             // cmp    rcx, 117
	JNE LBB0_10
    WORD $0x8545; BYTE $0xff     // test    r15d, r15d
	JE LBB0_12
    WORD $0x8944; BYTE $0xf9     // mov    ecx, r15d
    LONG $0xbc0f4cf3; BYTE $0xf9 // tzcnt    r15, rcx
    WORD $0x2945; BYTE $0xc7     // sub    r15d, r8d
    LONG $0x06ff8341             // cmp    r15d, 6
	JAE LBB0_15
	JMP LBB0_3
LBB0_9:
    LONG $0x20c78348             // add    rdi, 32
    LONG $0x20c58349             // add    r13, 32
    WORD $0x8949; BYTE $0xfe     // mov    r14, rdi
	JMP LBB0_30
LBB0_10:
    LONG $0x0cb60f42; BYTE $0x21 // movzx    ecx, byte [rcx + r12]
    WORD $0xc984                 // test    cl, cl
	JE LBB0_3
    LONG $0x054c8843; BYTE $0x00 // mov    byte [r13 + r8], cl
    LONG $0x07748d4e; BYTE $0x02 // lea    r14, [rdi + r8 + 2]
    LONG $0x01488d49             // lea    rcx, [r8 + 1]
LBB0_29:
    WORD $0x0149; BYTE $0xcd     // add    r13, rcx
	JMP LBB0_30
LBB0_12:
    LONG $0x0020bf41; WORD $0x0000 // mov    r15d, 32
    LONG $0x15f88341             // cmp    r8d, 21
	JB LBB0_14
    LONG $0xec488d41             // lea    ecx, [r8 - 20]
    LONG $0x1474f5c5; BYTE $0x0f // vpcmpeqb    ymm2, ymm1, yword [rdi + rcx]
    LONG $0xcad7fdc5             // vpmovmskb    ecx, ymm2
    LONG $0xbc0f48f3; BYTE $0xd9 // tzcnt    rbx, rcx
    WORD $0xc985                 // test    ecx, ecx
    LONG $0x000020b9; BYTE $0x00 // mov    ecx, 32
    WORD $0x440f; BYTE $0xd9     // cmove    ebx, ecx
    LONG $0x037c8d46; BYTE $0xec // lea    r15d, [rbx + r8 - 20]
LBB0_14:
    WORD $0x2945; BYTE $0xc7     // sub    r15d, r8d
    LONG $0x06ff8341             // cmp    r15d, 6
	JB LBB0_3
LBB0_15:
    WORD $0x014c; BYTE $0xc7     // add    rdi, r8
    LONG $0x024fb60f             // movzx    ecx, byte [rdi + 2]
    LONG $0x34be0f46; BYTE $0x09 // movsx    r14d, byte [rcx + r9]
    LONG $0x035fb60f             // movzx    ebx, byte [rdi + 3]
    LONG $0x1cbe0f42; BYTE $0x0b // movsx    ebx, byte [rbx + r9]
    LONG $0x044fb60f             // movzx    ecx, byte [rdi + 4]
    LONG $0x1cbe0f46; BYTE $0x09 // movsx    r11d, byte [rcx + r9]
    LONG $0x054fb60f             // movzx    ecx, byte [rdi + 5]
    LONG $0x0cbe0f42; BYTE $0x09 // movsx    ecx, byte [rcx + r9]
    LONG $0x0ce6c141             // shl    r14d, 12
    WORD $0xe3c1; BYTE $0x08     // shl    ebx, 8
    WORD $0x0944; BYTE $0xf3     // or    ebx, r14d
    LONG $0x04e3c141             // shl    r11d, 4
    WORD $0x0941; BYTE $0xcb     // or    r11d, ecx
    WORD $0x0941; BYTE $0xdb     // or    r11d, ebx
    LONG $0x06778d4c             // lea    r14, [rdi + 6]
    WORD $0x8944; BYTE $0xd9     // mov    ecx, r11d
    LONG $0xfc00e181; WORD $0xffff // and    ecx, -1024
    LONG $0xd800f981; WORD $0x0000 // cmp    ecx, 55296
	JNE LBB0_21
    LONG $0x0cff8341             // cmp    r15d, 12
	JB LBB0_3
    LONG $0x5c3e8041             // cmp    byte [r14], 92
	JNE LBB0_3
    LONG $0x75077f80             // cmp    byte [rdi + 7], 117
	JNE LBB0_3
    LONG $0x084fb60f             // movzx    ecx, byte [rdi + 8]
    LONG $0x34be0f46; BYTE $0x09 // movsx    r14d, byte [rcx + r9]
    LONG $0x094fb60f             // movzx    ecx, byte [rdi + 9]
    LONG $0x3cbe0f46; BYTE $0x09 // movsx    r15d, byte [rcx + r9]
    LONG $0x0a4fb60f             // movzx    ecx, byte [rdi + 10]
    LONG $0x0cbe0f42; BYTE $0x09 // movsx    ecx, byte [rcx + r9]
    LONG $0x0b5fb60f             // movzx    ebx, byte [rdi + 11]
    LONG $0x1cbe0f42; BYTE $0x0b // movsx    ebx, byte [rbx + r9]
    LONG $0x0ce6c141             // shl    r14d, 12
    LONG $0x08e7c141             // shl    r15d, 8
    WORD $0x0945; BYTE $0xf7     // or    r15d, r14d
    WORD $0xe1c1; BYTE $0x04     // shl    ecx, 4
    WORD $0xd909                 // or    ecx, ebx
    WORD $0x0944; BYTE $0xf9     // or    ecx, r15d
    WORD $0xcb89                 // mov    ebx, ecx
    WORD $0x0944; BYTE $0xdb     // or    ebx, r11d
    LONG $0xfffffb81; WORD $0x0000 // cmp    ebx, 65535
	JA LBB0_3
    LONG $0x0ae3c141             // shl    r11d, 10
    LONG $0x00c38141; WORD $0xa000; BYTE $0xfc // add    r11d, -56623104
    LONG $0x2400c181; WORD $0xffff // add    ecx, -56320
    WORD $0x0944; BYTE $0xd9     // or    ecx, r11d
    LONG $0x0000c181; WORD $0x0001 // add    ecx, 65536
    LONG $0x0cc78348             // add    rdi, 12
    WORD $0x8949; BYTE $0xfe     // mov    r14, rdi
    WORD $0x8941; BYTE $0xcb     // mov    r11d, ecx
LBB0_21:
    WORD $0x014d; BYTE $0xc5     // add    r13, r8
    LONG $0x7ffb8341             // cmp    r11d, 127
	JA LBB0_23
    LONG $0x005d8845             // mov    byte [r13], r11b
    WORD $0x014d; BYTE $0xd5     // add    r13, r10
LBB0_30:
    LONG $0x6f7ec1c4; BYTE $0x16 // vmovdqu    ymm2, yword [r14]
    LONG $0x7f7ec1c4; WORD $0x0055 // vmovdqu    yword [r13], ymm2
    LONG $0xd874edc5             // vpcmpeqb    ymm3, ymm2, ymm0
    LONG $0xcbd7fdc5             // vpmovmskb    ecx, ymm3
    LONG $0xd174edc5             // vpcmpeqb    ymm2, ymm2, ymm1
    LONG $0xfad77dc5             // vpmovmskb    r15d, ymm2
    WORD $0x598d; BYTE $0xff     // lea    ebx, [rcx - 1]
    WORD $0x894c; BYTE $0xf7     // mov    rdi, r14
    WORD $0x8544; BYTE $0xfb     // test    ebx, r15d
	JE LBB0_5
	JMP LBB0_2
