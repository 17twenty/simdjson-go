//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

DATA LCDATA1<>+0x000(SB)/8, $0x5c5c5c5c5c5c5c5c
DATA LCDATA1<>+0x008(SB)/8, $0x5c5c5c5c5c5c5c5c
DATA LCDATA1<>+0x010(SB)/8, $0x5c5c5c5c5c5c5c5c
DATA LCDATA1<>+0x018(SB)/8, $0x5c5c5c5c5c5c5c5c
DATA LCDATA1<>+0x020(SB)/8, $0x2222222222222222
DATA LCDATA1<>+0x028(SB)/8, $0x2222222222222222
DATA LCDATA1<>+0x030(SB)/8, $0x2222222222222222
DATA LCDATA1<>+0x038(SB)/8, $0x2222222222222222
DATA LCDATA1<>+0x070(SB)/8, $0x0706050403020100
DATA LCDATA1<>+0x078(SB)/8, $0xffffffffffff0908
DATA LCDATA1<>+0x080(SB)/8, $0xff0f0e0d0c0b0aff
DATA LCDATA1<>+0x088(SB)/8, $0xffffffffffffffff
DATA LCDATA1<>+0x090(SB)/8, $0xffffffffffffffff
DATA LCDATA1<>+0x098(SB)/8, $0xffffffffffffffff
DATA LCDATA1<>+0x0a0(SB)/8, $0xff0f0e0d0c0b0aff
DATA LCDATA1<>+0x0a8(SB)/8, $0xffffffffffffffff
DATA LCDATA1<>+0x0b0(SB)/8, $0xffffffffffffffff
DATA LCDATA1<>+0x0b8(SB)/8, $0xffffffffffffffff
DATA LCDATA1<>+0x0c0(SB)/8, $0xffffffffffffffff
DATA LCDATA1<>+0x0c8(SB)/8, $0xffffffffffffffff
DATA LCDATA1<>+0x0d0(SB)/8, $0xffffffffffffffff
DATA LCDATA1<>+0x0d8(SB)/8, $0xffffffffffffffff
DATA LCDATA1<>+0x0e0(SB)/8, $0xffffffffffffffff
DATA LCDATA1<>+0x0e8(SB)/8, $0xffffffffffffffff
DATA LCDATA1<>+0x0f0(SB)/8, $0xffffffffffffffff
DATA LCDATA1<>+0x0f8(SB)/8, $0xffffffffffffffff
DATA LCDATA1<>+0x100(SB)/8, $0xffffffffffffffff
DATA LCDATA1<>+0x108(SB)/8, $0xffffffffffffffff
DATA LCDATA1<>+0x110(SB)/8, $0xffffffffffffffff
DATA LCDATA1<>+0x118(SB)/8, $0xffffffffffffffff
DATA LCDATA1<>+0x120(SB)/8, $0xffffffffffffffff
DATA LCDATA1<>+0x128(SB)/8, $0xffffffffffffffff
DATA LCDATA1<>+0x130(SB)/8, $0xffffffffffffffff
DATA LCDATA1<>+0x138(SB)/8, $0xffffffffffffffff
DATA LCDATA1<>+0x140(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x148(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x150(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x158(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x160(SB)/8, $0x0000000000220000
DATA LCDATA1<>+0x168(SB)/8, $0x2f00000000000000
DATA LCDATA1<>+0x170(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x178(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x180(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x188(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x190(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x198(SB)/8, $0x0000005c00000000
DATA LCDATA1<>+0x1a0(SB)/8, $0x000c000000080000
DATA LCDATA1<>+0x1a8(SB)/8, $0x000a000000000000
DATA LCDATA1<>+0x1b0(SB)/8, $0x00000009000d0000
DATA LCDATA1<>+0x1b8(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x1c0(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x1c8(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x1d0(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x1d8(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x1e0(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x1e8(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x1f0(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x1f8(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x200(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x208(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x210(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x218(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x220(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x228(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x230(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x238(SB)/8, $0x0000000000000000
GLOBL LCDATA1<>(SB), 8, $576

TEXT Â·_parse_string_validate_only(SB), $0-32

    MOVQ src+0(FP), DI
    MOVQ str_length+8(FP), SI
    MOVQ dst_length+16(FP), DX
    LEAQ LCDATA1<>(SB), BP

    LONG $0x076ffec5             // vmovdqu    ymm0, yword [rdi]
    LONG $0x4d74fdc5; BYTE $0x00 // vpcmpeqb    ymm1, ymm0, yword 0[rbp] /* [rip + LCPI0_0] */
    LONG $0xd9d7fdc5             // vpmovmskb    ebx, ymm1
    LONG $0x4574fdc5; BYTE $0x20 // vpcmpeqb    ymm0, ymm0, yword 32[rbp] /* [rip + LCPI0_1] */
    LONG $0xc8d7fdc5             // vpmovmskb    ecx, ymm0
    WORD $0x438d; BYTE $0xff     // lea    eax, [rbx - 1]
    WORD $0x3145; BYTE $0xdb     // xor    r11d, r11d
    WORD $0xc885                 // test    eax, ecx
	JE LBB0_2
    WORD $0x8949; BYTE $0xff     // mov    r15, rdi
	JMP LBB0_29
LBB0_2:
    LONG $0x456ffdc5; BYTE $0x00 // vmovdqa    ymm0, yword 0[rbp] /* [rip + LCPI0_0] */
    LONG $0x4d6ffdc5; BYTE $0x20 // vmovdqa    ymm1, yword 32[rbp] /* [rip + LCPI0_1] */
    LONG $0x0020b841; WORD $0x0000 // mov    r8d, 32
    LONG $0x40558d4c             // lea    r10, 64[rbp] /* [rip + __ZL10digittoval] */
    LONG $0x408d8d4c; WORD $0x0001; BYTE $0x00 // lea    r9, 320[rbp] /* [rip + __ZL10escape_map] */
    WORD $0x8949; BYTE $0xfc     // mov    r12, rdi
LBB0_3:
    WORD $0x418d; BYTE $0xff     // lea    eax, [rcx - 1]
    WORD $0xd885                 // test    eax, ebx
	JE LBB0_7
    WORD $0xd889                 // mov    eax, ebx
    LONG $0xbc0f4cf3; BYTE $0xf0 // tzcnt    r14, rax
    LONG $0x5cb60f43; WORD $0x0134 // movzx    ebx, byte [r12 + r14 + 1]
    LONG $0x75fb8348             // cmp    rbx, 117
	JNE LBB0_8
    WORD $0xc985                 // test    ecx, ecx
	JE LBB0_10
    WORD $0xc889                 // mov    eax, ecx
    LONG $0xbc0f48f3; BYTE $0xd8 // tzcnt    rbx, rax
    WORD $0x2944; BYTE $0xf3     // sub    ebx, r14d
    WORD $0xfb83; BYTE $0x06     // cmp    ebx, 6
	JAE LBB0_13
	JMP LBB0_32
LBB0_7:
    LONG $0x20c48349             // add    r12, 32
    LONG $0x20c38349             // add    r11, 32
    WORD $0x894d; BYTE $0xe7     // mov    r15, r12
	JMP LBB0_28
LBB0_8:
    LONG $0x0b3c8042; BYTE $0x00 // cmp    byte [rbx + r9], 0
	JE LBB0_32
    LONG $0x347c8d4f; BYTE $0x02 // lea    r15, [r12 + r14 + 2]
    WORD $0xff49; BYTE $0xc6     // inc    r14
    WORD $0x014d; BYTE $0xf3     // add    r11, r14
	JMP LBB0_28
LBB0_10:
    LONG $0x000020bb; BYTE $0x00 // mov    ebx, 32
    LONG $0x15fe8341             // cmp    r14d, 21
	JB LBB0_12
    LONG $0xec468d41             // lea    eax, [r14 - 20]
    LONG $0x7475c1c4; WORD $0x0414 // vpcmpeqb    ymm2, ymm1, yword [r12 + rax]
    LONG $0xc2d7fdc5             // vpmovmskb    eax, ymm2
    LONG $0xbc0f48f3; BYTE $0xc8 // tzcnt    rcx, rax
    WORD $0xc085                 // test    eax, eax
    LONG $0xc8440f41             // cmove    ecx, r8d
    LONG $0x315c8d42; BYTE $0xec // lea    ebx, [rcx + r14 - 20]
LBB0_12:
    WORD $0x2944; BYTE $0xf3     // sub    ebx, r14d
    WORD $0xfb83; BYTE $0x06     // cmp    ebx, 6
	JB LBB0_32
LBB0_13:
    WORD $0x014d; BYTE $0xf4     // add    r12, r14
    LONG $0x44b60f41; WORD $0x0224 // movzx    eax, byte [r12 + 2]
    LONG $0x3cbe0f46; BYTE $0x10 // movsx    r15d, byte [rax + r10]
    LONG $0x4cb60f41; WORD $0x0324 // movzx    ecx, byte [r12 + 3]
    LONG $0x04be0f42; BYTE $0x11 // movsx    eax, byte [rcx + r10]
    LONG $0x4cb60f41; WORD $0x0424 // movzx    ecx, byte [r12 + 4]
    LONG $0x2cbe0f46; BYTE $0x11 // movsx    r13d, byte [rcx + r10]
    LONG $0x4cb60f41; WORD $0x0524 // movzx    ecx, byte [r12 + 5]
    LONG $0x0cbe0f42; BYTE $0x11 // movsx    ecx, byte [rcx + r10]
    LONG $0x0ce7c141             // shl    r15d, 12
    WORD $0xe0c1; BYTE $0x08     // shl    eax, 8
    WORD $0x0944; BYTE $0xf8     // or    eax, r15d
    LONG $0x04e5c141             // shl    r13d, 4
    WORD $0x0941; BYTE $0xcd     // or    r13d, ecx
    WORD $0x0941; BYTE $0xc5     // or    r13d, eax
    LONG $0x247c8d4d; BYTE $0x06 // lea    r15, [r12 + 6]
    WORD $0x8944; BYTE $0xe8     // mov    eax, r13d
    LONG $0xfffc0025; BYTE $0xff // and    eax, -1024
    LONG $0x00d8003d; BYTE $0x00 // cmp    eax, 55296
	JNE LBB0_19
    WORD $0xfb83; BYTE $0x0c     // cmp    ebx, 12
	JB LBB0_32
    LONG $0x5c3f8041             // cmp    byte [r15], 92
	JNE LBB0_32
    LONG $0x247c8041; WORD $0x7507 // cmp    byte [r12 + 7], 117
	JNE LBB0_32
    LONG $0x44b60f41; WORD $0x0824 // movzx    eax, byte [r12 + 8]
    LONG $0x3cbe0f46; BYTE $0x10 // movsx    r15d, byte [rax + r10]
    LONG $0x4cb60f41; WORD $0x0924 // movzx    ecx, byte [r12 + 9]
    LONG $0x0cbe0f42; BYTE $0x11 // movsx    ecx, byte [rcx + r10]
    LONG $0x5cb60f41; WORD $0x0a24 // movzx    ebx, byte [r12 + 10]
    LONG $0x1cbe0f42; BYTE $0x13 // movsx    ebx, byte [rbx + r10]
    LONG $0x44b60f41; WORD $0x0b24 // movzx    eax, byte [r12 + 11]
    LONG $0x04be0f42; BYTE $0x10 // movsx    eax, byte [rax + r10]
    LONG $0x0ce7c141             // shl    r15d, 12
    WORD $0xe1c1; BYTE $0x08     // shl    ecx, 8
    WORD $0x0944; BYTE $0xf9     // or    ecx, r15d
    WORD $0xe3c1; BYTE $0x04     // shl    ebx, 4
    WORD $0xc309                 // or    ebx, eax
    WORD $0xcb09                 // or    ebx, ecx
    WORD $0xd889                 // mov    eax, ebx
    WORD $0x0944; BYTE $0xe8     // or    eax, r13d
    LONG $0x00ffff3d; BYTE $0x00 // cmp    eax, 65535
	JA LBB0_32
    LONG $0x0ae5c141             // shl    r13d, 10
    LONG $0x00c58141; WORD $0xa000; BYTE $0xfc // add    r13d, -56623104
    LONG $0x2400c381; WORD $0xffff // add    ebx, -56320
    WORD $0x0944; BYTE $0xeb     // or    ebx, r13d
    LONG $0x0000c381; WORD $0x0001 // add    ebx, 65536
    LONG $0x0cc48349             // add    r12, 12
    WORD $0x894d; BYTE $0xe7     // mov    r15, r12
    WORD $0x8941; BYTE $0xdd     // mov    r13d, ebx
LBB0_19:
    LONG $0x80fd8141; WORD $0x0000; BYTE $0x00 // cmp    r13d, 128
	JAE LBB0_21
    LONG $0x000001b8; BYTE $0x00 // mov    eax, 1
	JMP LBB0_27
LBB0_21:
    LONG $0x00fd8141; WORD $0x0008; BYTE $0x00 // cmp    r13d, 2048
	JAE LBB0_23
    LONG $0x000002b8; BYTE $0x00 // mov    eax, 2
	JMP LBB0_27
LBB0_23:
    LONG $0x00fd8141; WORD $0x0100; BYTE $0x00 // cmp    r13d, 65536
	JAE LBB0_25
    LONG $0x000003b8; BYTE $0x00 // mov    eax, 3
	JMP LBB0_27
LBB0_25:
    LONG $0xfffd8141; WORD $0x10ff; BYTE $0x00 // cmp    r13d, 1114111
	JA LBB0_32
    LONG $0x000004b8; BYTE $0x00 // mov    eax, 4
LBB0_27:
    WORD $0x014d; BYTE $0xf3     // add    r11, r14
    WORD $0x0149; BYTE $0xc3     // add    r11, rax
LBB0_28:
    LONG $0x6f7ec1c4; BYTE $0x17 // vmovdqu    ymm2, yword [r15]
    LONG $0xd874edc5             // vpcmpeqb    ymm3, ymm2, ymm0
    LONG $0xdbd7fdc5             // vpmovmskb    ebx, ymm3
    LONG $0xd174edc5             // vpcmpeqb    ymm2, ymm2, ymm1
    LONG $0xcad7fdc5             // vpmovmskb    ecx, ymm2
    WORD $0x438d; BYTE $0xff     // lea    eax, [rbx - 1]
    WORD $0x894d; BYTE $0xfc     // mov    r12, r15
    WORD $0xc885                 // test    eax, ecx
	JE LBB0_3
LBB0_29:
    WORD $0xc889                 // mov    eax, ecx
    LONG $0xbc0f48f3; BYTE $0xc0 // tzcnt    rax, rax
    WORD $0x2949; BYTE $0xff     // sub    r15, rdi
    WORD $0x0149; BYTE $0xc7     // add    r15, rax
    WORD $0x894c; BYTE $0x3e     // mov    qword [rsi], r15
    WORD $0x0149; BYTE $0xc3     // add    r11, rax
    WORD $0x894c; BYTE $0x1a     // mov    qword [rdx], r11
    WORD $0x01b0                 // mov    al, 1
	JMP LBB0_30
LBB0_32:
    WORD $0xc031                 // xor    eax, eax
LBB0_30:
    VZEROUPPER
    MOVQ AX, result+24(FP)
    RET

TEXT Â·_parse_string(SB), $0-32

    MOVQ src+0(FP), DI
    MOVQ dst+8(FP), SI
    MOVQ pcurrent_string_buf_loc+16(FP), DX
    LEAQ LCDATA1<>(SB), BP

    LONG $0x076ffec5             // vmovdqu    ymm0, yword [rdi]
    LONG $0x067ffec5             // vmovdqu    yword [rsi], ymm0
    LONG $0x4d74fdc5; BYTE $0x00 // vpcmpeqb    ymm1, ymm0, yword 0[rbp] /* [rip + LCPI0_0] */
    LONG $0xc9d7fdc5             // vpmovmskb    ecx, ymm1
    LONG $0x4574fdc5; BYTE $0x20 // vpcmpeqb    ymm0, ymm0, yword 32[rbp] /* [rip + LCPI0_1] */
    LONG $0xf0d77dc5             // vpmovmskb    r14d, ymm0
    WORD $0x418d; BYTE $0xff     // lea    eax, [rcx - 1]
    WORD $0x8544; BYTE $0xf0     // test    eax, r14d
	JE LBB0_3
LBB0_1:
    WORD $0x8944; BYTE $0xf0     // mov    eax, r14d
    LONG $0xbc0f48f3; BYTE $0xc0 // tzcnt    rax, rax
    WORD $0x0148; BYTE $0xf0     // add    rax, rsi
    WORD $0x8948; BYTE $0x02     // mov    qword [rdx], rax
    LONG $0x000001b8; BYTE $0x00 // mov    eax, 1
LBB0_2:
    VZEROUPPER
    MOVQ AX, res+24(FP)
    RET
LBB0_3:
    LONG $0x456ffdc5; BYTE $0x00 // vmovdqa    ymm0, yword 0[rbp] /* [rip + LCPI0_0] */
    LONG $0x4d6ffdc5; BYTE $0x20 // vmovdqa    ymm1, yword 32[rbp] /* [rip + LCPI0_1] */
    WORD $0xc031                 // xor    eax, eax
    LONG $0x40658d4c             // lea    r12, 64[rbp] /* [rip + __ZL10digittoval] */
    LONG $0x0001b941; WORD $0x0000 // mov    r9d, 1
    LONG $0x0002ba41; WORD $0x0000 // mov    r10d, 2
    LONG $0x40bd8d4c; WORD $0x0001; BYTE $0x00 // lea    r15, 320[rbp] /* [rip + __ZL10escape_map] */
	JMP LBB0_4
LBB0_24:
    LONG $0xfff88141; WORD $0x00ff; BYTE $0x00 // cmp    r8d, 65535
	JA LBB0_26
    WORD $0x8944; BYTE $0xc1     // mov    ecx, r8d
    WORD $0xe9c1; BYTE $0x0c     // shr    ecx, 12
    LONG $0x00e0c181; WORD $0x0000 // add    ecx, 224
    WORD $0x0e88                 // mov    byte [rsi], cl
    WORD $0x8944; BYTE $0xc1     // mov    ecx, r8d
    WORD $0xe9c1; BYTE $0x06     // shr    ecx, 6
    WORD $0xe180; BYTE $0x3f     // and    cl, 63
    WORD $0xc980; BYTE $0x80     // or    cl, -128
    WORD $0x4e88; BYTE $0x01     // mov    byte [rsi + 1], cl
    LONG $0x3fe08041             // and    r8b, 63
    LONG $0x80c88041             // or    r8b, -128
    LONG $0x02468844             // mov    byte [rsi + 2], r8b
    LONG $0x000003b9; BYTE $0x00 // mov    ecx, 3
	JMP LBB0_28
LBB0_26:
    LONG $0xfff88141; WORD $0x10ff; BYTE $0x00 // cmp    r8d, 1114111
	JA LBB0_2
    WORD $0x8944; BYTE $0xc1     // mov    ecx, r8d
    WORD $0xe9c1; BYTE $0x12     // shr    ecx, 18
    LONG $0x00f0c181; WORD $0x0000 // add    ecx, 240
    WORD $0x0e88                 // mov    byte [rsi], cl
    WORD $0x8944; BYTE $0xc1     // mov    ecx, r8d
    WORD $0xe9c1; BYTE $0x0c     // shr    ecx, 12
    WORD $0xe180; BYTE $0x3f     // and    cl, 63
    WORD $0xc980; BYTE $0x80     // or    cl, -128
    WORD $0x4e88; BYTE $0x01     // mov    byte [rsi + 1], cl
    WORD $0x8944; BYTE $0xc1     // mov    ecx, r8d
    WORD $0xe9c1; BYTE $0x06     // shr    ecx, 6
    WORD $0xe180; BYTE $0x3f     // and    cl, 63
    WORD $0xc980; BYTE $0x80     // or    cl, -128
    WORD $0x4e88; BYTE $0x02     // mov    byte [rsi + 2], cl
    LONG $0x3fe08041             // and    r8b, 63
    LONG $0x80c88041             // or    r8b, -128
    LONG $0x03468844             // mov    byte [rsi + 3], r8b
    LONG $0x000004b9; BYTE $0x00 // mov    ecx, 4
	JMP LBB0_28
LBB0_4:
    LONG $0xff5e8d41             // lea    ebx, [r14 - 1]
    WORD $0xcb85                 // test    ebx, ecx
	JE LBB0_8
    WORD $0xc989                 // mov    ecx, ecx
    LONG $0xbc0f4cf3; BYTE $0xd9 // tzcnt    r11, rcx
    LONG $0x4cb60f42; WORD $0x011f // movzx    ecx, byte [rdi + r11 + 1]
    LONG $0x75f98348             // cmp    rcx, 117
	JNE LBB0_9
    WORD $0x8545; BYTE $0xf6     // test    r14d, r14d
	JE LBB0_11
    WORD $0x8944; BYTE $0xf1     // mov    ecx, r14d
    LONG $0xbc0f4cf3; BYTE $0xf1 // tzcnt    r14, rcx
    WORD $0x2945; BYTE $0xde     // sub    r14d, r11d
    LONG $0x06fe8341             // cmp    r14d, 6
	JAE LBB0_14
	JMP LBB0_2
LBB0_8:
    LONG $0x20c78348             // add    rdi, 32
    LONG $0x20c68348             // add    rsi, 32
    WORD $0x8949; BYTE $0xfd     // mov    r13, rdi
	JMP LBB0_29
LBB0_9:
    LONG $0x0cb60f42; BYTE $0x39 // movzx    ecx, byte [rcx + r15]
    WORD $0xc984                 // test    cl, cl
	JE LBB0_2
    LONG $0x1e0c8842             // mov    byte [rsi + r11], cl
    LONG $0x1f6c8d4e; BYTE $0x02 // lea    r13, [rdi + r11 + 2]
    LONG $0x014b8d49             // lea    rcx, [r11 + 1]
LBB0_28:
    WORD $0x0148; BYTE $0xce     // add    rsi, rcx
	JMP LBB0_29
LBB0_11:
    LONG $0x0020be41; WORD $0x0000 // mov    r14d, 32
    LONG $0x15fb8341             // cmp    r11d, 21
	JB LBB0_13
    LONG $0xec4b8d41             // lea    ecx, [r11 - 20]
    LONG $0x1474f5c5; BYTE $0x0f // vpcmpeqb    ymm2, ymm1, yword [rdi + rcx]
    LONG $0xcad7fdc5             // vpmovmskb    ecx, ymm2
    LONG $0xbc0f48f3; BYTE $0xd9 // tzcnt    rbx, rcx
    WORD $0xc985                 // test    ecx, ecx
    LONG $0x000020b9; BYTE $0x00 // mov    ecx, 32
    WORD $0x440f; BYTE $0xd9     // cmove    ebx, ecx
    LONG $0x1b748d46; BYTE $0xec // lea    r14d, [rbx + r11 - 20]
LBB0_13:
    WORD $0x2945; BYTE $0xde     // sub    r14d, r11d
    LONG $0x06fe8341             // cmp    r14d, 6
	JB LBB0_2
LBB0_14:
    WORD $0x014c; BYTE $0xdf     // add    rdi, r11
    LONG $0x024fb60f             // movzx    ecx, byte [rdi + 2]
    LONG $0x2cbe0f46; BYTE $0x21 // movsx    r13d, byte [rcx + r12]
    LONG $0x035fb60f             // movzx    ebx, byte [rdi + 3]
    LONG $0x1cbe0f42; BYTE $0x23 // movsx    ebx, byte [rbx + r12]
    LONG $0x044fb60f             // movzx    ecx, byte [rdi + 4]
    LONG $0x04be0f46; BYTE $0x21 // movsx    r8d, byte [rcx + r12]
    LONG $0x054fb60f             // movzx    ecx, byte [rdi + 5]
    LONG $0x0cbe0f42; BYTE $0x21 // movsx    ecx, byte [rcx + r12]
    LONG $0x0ce5c141             // shl    r13d, 12
    WORD $0xe3c1; BYTE $0x08     // shl    ebx, 8
    WORD $0x0944; BYTE $0xeb     // or    ebx, r13d
    LONG $0x04e0c141             // shl    r8d, 4
    WORD $0x0941; BYTE $0xc8     // or    r8d, ecx
    WORD $0x0941; BYTE $0xd8     // or    r8d, ebx
    LONG $0x066f8d4c             // lea    r13, [rdi + 6]
    WORD $0x8944; BYTE $0xc1     // mov    ecx, r8d
    LONG $0xfc00e181; WORD $0xffff // and    ecx, -1024
    LONG $0xd800f981; WORD $0x0000 // cmp    ecx, 55296
	JNE LBB0_20
    LONG $0x0cfe8341             // cmp    r14d, 12
	JB LBB0_2
    LONG $0x007d8041; BYTE $0x5c // cmp    byte [r13], 92
	JNE LBB0_2
    LONG $0x75077f80             // cmp    byte [rdi + 7], 117
	JNE LBB0_2
    LONG $0x084fb60f             // movzx    ecx, byte [rdi + 8]
    LONG $0x34be0f46; BYTE $0x21 // movsx    r14d, byte [rcx + r12]
    LONG $0x094fb60f             // movzx    ecx, byte [rdi + 9]
    LONG $0x2cbe0f46; BYTE $0x21 // movsx    r13d, byte [rcx + r12]
    LONG $0x0a4fb60f             // movzx    ecx, byte [rdi + 10]
    LONG $0x0cbe0f42; BYTE $0x21 // movsx    ecx, byte [rcx + r12]
    LONG $0x0b5fb60f             // movzx    ebx, byte [rdi + 11]
    LONG $0x1cbe0f42; BYTE $0x23 // movsx    ebx, byte [rbx + r12]
    LONG $0x0ce6c141             // shl    r14d, 12
    LONG $0x08e5c141             // shl    r13d, 8
    WORD $0x0945; BYTE $0xf5     // or    r13d, r14d
    WORD $0xe1c1; BYTE $0x04     // shl    ecx, 4
    WORD $0xd909                 // or    ecx, ebx
    WORD $0x0944; BYTE $0xe9     // or    ecx, r13d
    WORD $0xcb89                 // mov    ebx, ecx
    WORD $0x0944; BYTE $0xc3     // or    ebx, r8d
    LONG $0xfffffb81; WORD $0x0000 // cmp    ebx, 65535
	JA LBB0_2
    LONG $0x0ae0c141             // shl    r8d, 10
    LONG $0x00c08141; WORD $0xa000; BYTE $0xfc // add    r8d, -56623104
    LONG $0x2400c181; WORD $0xffff // add    ecx, -56320
    WORD $0x0944; BYTE $0xc1     // or    ecx, r8d
    LONG $0x0000c181; WORD $0x0001 // add    ecx, 65536
    LONG $0x0cc78348             // add    rdi, 12
    WORD $0x8949; BYTE $0xfd     // mov    r13, rdi
    WORD $0x8941; BYTE $0xc8     // mov    r8d, ecx
LBB0_20:
    WORD $0x014c; BYTE $0xde     // add    rsi, r11
    LONG $0x7ff88341             // cmp    r8d, 127
	JA LBB0_22
    WORD $0x8844; BYTE $0x06     // mov    byte [rsi], r8b
    WORD $0x014c; BYTE $0xce     // add    rsi, r9
	JMP LBB0_29
LBB0_22:
    LONG $0xfff88141; WORD $0x0007; BYTE $0x00 // cmp    r8d, 2047
	JA LBB0_24
    WORD $0x8944; BYTE $0xc1     // mov    ecx, r8d
    WORD $0xe9c1; BYTE $0x06     // shr    ecx, 6
    LONG $0x00c0c181; WORD $0x0000 // add    ecx, 192
    WORD $0x0e88                 // mov    byte [rsi], cl
    LONG $0x3fe08041             // and    r8b, 63
    LONG $0x80c88041             // or    r8b, -128
    LONG $0x01468844             // mov    byte [rsi + 1], r8b
    WORD $0x014c; BYTE $0xd6     // add    rsi, r10
LBB0_29:
    LONG $0x6f7ec1c4; WORD $0x0055 // vmovdqu    ymm2, yword [r13]
    LONG $0x167ffec5             // vmovdqu    yword [rsi], ymm2
    LONG $0xd874edc5             // vpcmpeqb    ymm3, ymm2, ymm0
    LONG $0xcbd7fdc5             // vpmovmskb    ecx, ymm3
    LONG $0xd174edc5             // vpcmpeqb    ymm2, ymm2, ymm1
    LONG $0xf2d77dc5             // vpmovmskb    r14d, ymm2
    WORD $0x598d; BYTE $0xff     // lea    ebx, [rcx - 1]
    WORD $0x894c; BYTE $0xef     // mov    rdi, r13
    WORD $0x8544; BYTE $0xf3     // test    ebx, r14d
	JE LBB0_4
	JMP LBB0_1
