//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

DATA LCDATA1<>+0x000(SB)/8, $0x0000000000000010
DATA LCDATA1<>+0x008(SB)/8, $0x00000902010c0800
DATA LCDATA1<>+0x010(SB)/8, $0x0000000000000010
DATA LCDATA1<>+0x018(SB)/8, $0x00000902010c0800
DATA LCDATA1<>+0x020(SB)/8, $0x7f7f7f7f7f7f7f7f
DATA LCDATA1<>+0x028(SB)/8, $0x7f7f7f7f7f7f7f7f
DATA LCDATA1<>+0x030(SB)/8, $0x7f7f7f7f7f7f7f7f
DATA LCDATA1<>+0x038(SB)/8, $0x7f7f7f7f7f7f7f7f
DATA LCDATA1<>+0x040(SB)/8, $0x0100010004120008
DATA LCDATA1<>+0x048(SB)/8, $0x0000010203000000
DATA LCDATA1<>+0x050(SB)/8, $0x0100010004120008
DATA LCDATA1<>+0x058(SB)/8, $0x0000010203000000
DATA LCDATA1<>+0x060(SB)/8, $0x0707070707070707
DATA LCDATA1<>+0x068(SB)/8, $0x0707070707070707
DATA LCDATA1<>+0x070(SB)/8, $0x0707070707070707
DATA LCDATA1<>+0x078(SB)/8, $0x0707070707070707
DATA LCDATA1<>+0x080(SB)/8, $0x1818181818181818
DATA LCDATA1<>+0x088(SB)/8, $0x1818181818181818
DATA LCDATA1<>+0x090(SB)/8, $0x1818181818181818
DATA LCDATA1<>+0x098(SB)/8, $0x1818181818181818
GLOBL LCDATA1<>(SB), 8, $160

TEXT Â·_find_whitespace_and_structurals(SB), $0-40

    MOVQ input_lo+0(FP), DI
    MOVQ input_hi+8(FP), SI
    MOVQ whitespace+16(FP), DX
    MOVQ structurals+24(FP), CX
    LEAQ LCDATA1<>(SB), BP

    LONG $0x076ffec5             // vmovdqu    ymm0, yword [rdi]
    LONG $0x0e6ffec5             // vmovdqu    ymm1, yword [rsi]
    LONG $0x556ffdc5; BYTE $0x00 // vmovdqa    ymm2, yword 0[rbp] /* [rip + LCPI0_0] */
    LONG $0x006de2c4; BYTE $0xd8 // vpshufb    ymm3, ymm2, ymm0
    LONG $0xd072fdc5; BYTE $0x04 // vpsrld    ymm0, ymm0, 4
    LONG $0x656ffdc5; BYTE $0x20 // vmovdqa    ymm4, yword 32[rbp] /* [rip + LCPI0_1] */
    LONG $0xc4dbfdc5             // vpand    ymm0, ymm0, ymm4
    LONG $0x6d6ffdc5; BYTE $0x40 // vmovdqa    ymm5, yword 64[rbp] /* [rip + LCPI0_2] */
    LONG $0x0055e2c4; BYTE $0xc0 // vpshufb    ymm0, ymm5, ymm0
    LONG $0xc3dbfdc5             // vpand    ymm0, ymm0, ymm3
    LONG $0x006de2c4; BYTE $0xd1 // vpshufb    ymm2, ymm2, ymm1
    LONG $0xd172f5c5; BYTE $0x04 // vpsrld    ymm1, ymm1, 4
    LONG $0xccdbf5c5             // vpand    ymm1, ymm1, ymm4
    LONG $0x0055e2c4; BYTE $0xc9 // vpshufb    ymm1, ymm5, ymm1
    LONG $0xcadbf5c5             // vpand    ymm1, ymm1, ymm2
    LONG $0x556ffdc5; BYTE $0x60 // vmovdqa    ymm2, yword 96[rbp] /* [rip + LCPI0_3] */
    LONG $0xdadbfdc5             // vpand    ymm3, ymm0, ymm2
    LONG $0xe4efddc5             // vpxor    ymm4, ymm4, ymm4
    LONG $0xdc74e5c5             // vpcmpeqb    ymm3, ymm3, ymm4
    LONG $0xd2dbf5c5             // vpand    ymm2, ymm1, ymm2
    LONG $0xd474edc5             // vpcmpeqb    ymm2, ymm2, ymm4
    LONG $0xc3d7fdc5             // vpmovmskb    eax, ymm3
    LONG $0xf2d7fdc5             // vpmovmskb    esi, ymm2
    LONG $0x20e6c148             // shl    rsi, 32
    WORD $0x0948; BYTE $0xc6     // or    rsi, rax
    WORD $0xf748; BYTE $0xd6     // not    rsi
    WORD $0x8948; BYTE $0x31     // mov    qword [rcx], rsi
    QUAD $0x00000080956ffdc5     // vmovdqa    ymm2, yword 128[rbp] /* [rip + LCPI0_4] */
    LONG $0xc2dbfdc5             // vpand    ymm0, ymm0, ymm2
    LONG $0xc474fdc5             // vpcmpeqb    ymm0, ymm0, ymm4
    LONG $0xcadbf5c5             // vpand    ymm1, ymm1, ymm2
    LONG $0xcc74f5c5             // vpcmpeqb    ymm1, ymm1, ymm4
    LONG $0xc0d7fdc5             // vpmovmskb    eax, ymm0
    LONG $0xc9d7fdc5             // vpmovmskb    ecx, ymm1
    LONG $0x20e1c148             // shl    rcx, 32
    WORD $0x0948; BYTE $0xc1     // or    rcx, rax
    WORD $0xf748; BYTE $0xd1     // not    rcx
    WORD $0x8948; BYTE $0x0a     // mov    qword [rdx], rcx
    VZEROUPPER
    MOVQ AX, quote_mask+32(FP)
    RET
